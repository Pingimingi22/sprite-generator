// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "MyCubeViewUI.h"

void MyCubeViewUI::cb_Take_i(Fl_Button*, void*) {
  cube->WriteToImage();
}
void MyCubeViewUI::cb_Take(Fl_Button* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_Take_i(o,v);
}

void MyCubeViewUI::cb_8_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 8;
}
void MyCubeViewUI::cb_8(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_8_i(o,v);
}

void MyCubeViewUI::cb_16_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 16;
}
void MyCubeViewUI::cb_16(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_16_i(o,v);
}

void MyCubeViewUI::cb_32_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 32;
}
void MyCubeViewUI::cb_32(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_32_i(o,v);
}

void MyCubeViewUI::cb_64_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 64;
}
void MyCubeViewUI::cb_64(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_64_i(o,v);
}

void MyCubeViewUI::cb_128_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 128;
}
void MyCubeViewUI::cb_128(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_128_i(o,v);
}

Fl_Menu_Item MyCubeViewUI::menu_Number[] = {
 {"8", 0,  (Fl_Callback*)MyCubeViewUI::cb_8, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16", 0,  (Fl_Callback*)MyCubeViewUI::cb_16, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32", 0,  (Fl_Callback*)MyCubeViewUI::cb_32, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64", 0,  (Fl_Callback*)MyCubeViewUI::cb_64, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128", 0,  (Fl_Callback*)MyCubeViewUI::cb_128, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MyCubeViewUI::cb_rotationSliderY_i(Fl_Value_Slider* o, void*) {
  cube->rotationAngle = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_rotationSliderY(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_rotationSliderY_i(o,v);
}

void MyCubeViewUI::cb_rotationSliderZ_i(Fl_Value_Slider* o, void*) {
  cube->rotationAngle = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_rotationSliderZ(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_rotationSliderZ_i(o,v);
}

void MyCubeViewUI::cb_rotationSliderX_i(Fl_Value_Slider* o, void*) {
  cube->verticalRotationAngle = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_rotationSliderX(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_rotationSliderX_i(o,v);
}

void MyCubeViewUI::cb_cubeScaleSlider_i(Fl_Slider* o, void*) {
  cube->cubeScale = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_cubeScaleSlider(Fl_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_cubeScaleSlider_i(o,v);
}

void MyCubeViewUI::cb_scale_i(Fl_Value_Slider* o, void*) {
  cube->zScale = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_scale(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_scale_i(o,v);
}

void MyCubeViewUI::cb_offset_i(Fl_Value_Slider* o, void*) {
  cube->zOffset = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_offset(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_offset_i(o,v);
}

void MyCubeViewUI::cb_camera_i(Fl_Value_Slider* o, void*) {
  cube->cameraZoom = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_camera(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_camera_i(o,v);
}

void MyCubeViewUI::cb_ortho_i(Fl_Value_Slider* o, void*) {
  cube->orthoSize = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_ortho(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->parent()->user_data()))->cb_ortho_i(o,v);
}

Fl_Menu_Item MyCubeViewUI::menu_Sprite[] = {
 {"512x512", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128x128", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64x64", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MyCubeViewUI::cb_Gouraud_i(Fl_Menu_*, void*) {
  cube->ActivateGouraud();
}
void MyCubeViewUI::cb_Gouraud(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_Gouraud_i(o,v);
}

void MyCubeViewUI::cb_Unlit_i(Fl_Menu_*, void*) {
  cube->ActivateUnlit();
}
void MyCubeViewUI::cb_Unlit(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_Unlit_i(o,v);
}

Fl_Menu_Item MyCubeViewUI::menu_Shader[] = {
 {"Gouraud shading", 0,  (Fl_Callback*)MyCubeViewUI::cb_Gouraud, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"Unlit", 0,  (Fl_Callback*)MyCubeViewUI::cb_Unlit, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MyCubeViewUI::show(int argc, char **argv) {
  window->show(argc, argv);
}

/**
 test
*/
MyCubeViewUI::MyCubeViewUI() {
  { window = new Fl_Double_Window(991, 696);
    window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 0, 991, 72);
      { Fl_Box* o = new Fl_Box(1, 0, 990, 72, "Sprite Generator");
        o->labelfont(7);
        o->labelsize(30);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(15, 89, 958, 592);
      o->box(FL_UP_FRAME);
      { cube = new SimpleGL3Window(349, 166, 256, 256, "opengl context");
        cube->box(FL_NO_BOX);
        cube->color(FL_BACKGROUND_COLOR);
        cube->selection_color(FL_BACKGROUND_COLOR);
        cube->labeltype(FL_NORMAL_LABEL);
        cube->labelfont(0);
        cube->labelsize(14);
        cube->labelcolor(FL_FOREGROUND_COLOR);
        cube->align(Fl_Align(FL_ALIGN_CENTER));
        cube->when(FL_WHEN_RELEASE);
        cube->uiStuff = this;
      } // SimpleGL3Window* cube
      { Fl_Button* o = new Fl_Button(362, 647, 208, 24, "Take screenshot");
        o->callback((Fl_Callback*)cb_Take);
      } // Fl_Button* o
      { Fl_Choice* o = new Fl_Choice(510, 610, 56, 24, "Number of directions");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_Number);
      } // Fl_Choice* o
      { rotationSliderY = new Fl_Value_Slider(25, 596, 198, 22, "Rotate model y");
        rotationSliderY->type(5);
        rotationSliderY->maximum(360);
        rotationSliderY->step(1);
        rotationSliderY->textsize(14);
        rotationSliderY->callback((Fl_Callback*)cb_rotationSliderY);
      } // Fl_Value_Slider* rotationSliderY
      { rotationSliderZ = new Fl_Value_Slider(25, 633, 198, 22, "Rotate model z");
        rotationSliderZ->type(5);
        rotationSliderZ->maximum(360);
        rotationSliderZ->step(1);
        rotationSliderZ->textsize(14);
        rotationSliderZ->callback((Fl_Callback*)cb_rotationSliderZ);
      } // Fl_Value_Slider* rotationSliderZ
      { rotationSliderX = new Fl_Value_Slider(25, 558, 198, 24, "Rotate model x");
        rotationSliderX->type(5);
        rotationSliderX->maximum(360);
        rotationSliderX->step(1);
        rotationSliderX->textsize(14);
        rotationSliderX->callback((Fl_Callback*)cb_rotationSliderX);
      } // Fl_Value_Slider* rotationSliderX
      { meshTree = new Fl_Tree(801, 107, 156, 304);
      } // Fl_Tree* meshTree
      { Fl_Group* o = new Fl_Group(688, 439, 275, 232);
        { cubeScaleSlider = new Fl_Slider(701, 633, 256, 24, "cube scale");
          cubeScaleSlider->type(5);
          cubeScaleSlider->minimum(-100);
          cubeScaleSlider->maximum(100);
          cubeScaleSlider->step(0.01);
          cubeScaleSlider->value(1);
          cubeScaleSlider->callback((Fl_Callback*)cb_cubeScaleSlider);
        } // Fl_Slider* cubeScaleSlider
        { Fl_Value_Slider* o = new Fl_Value_Slider(701, 543, 256, 24, "scale");
          o->type(5);
          o->textsize(14);
          o->callback((Fl_Callback*)cb_scale);
        } // Fl_Value_Slider* o
        { Fl_Value_Slider* o = new Fl_Value_Slider(701, 586, 256, 24, "offset");
          o->type(5);
          o->minimum(-50);
          o->maximum(50);
          o->textsize(14);
          o->callback((Fl_Callback*)cb_offset);
        } // Fl_Value_Slider* o
        { Fl_Value_Slider* o = new Fl_Value_Slider(701, 454, 256, 24, "camera zoom");
          o->type(1);
          o->minimum(-25);
          o->maximum(25);
          o->value(-5);
          o->textsize(14);
          o->callback((Fl_Callback*)cb_camera);
        } // Fl_Value_Slider* o
        { Fl_Value_Slider* o = new Fl_Value_Slider(701, 497, 256, 24, "ortho size");
          o->type(5);
          o->minimum(-100);
          o->maximum(100);
          o->value(5);
          o->textsize(14);
          o->callback((Fl_Callback*)cb_ortho);
        } // Fl_Value_Slider* o
        o->end();
      } // Fl_Group* o
      { Fl_Choice* o = new Fl_Choice(446, 546, 120, 24, "Sprite size");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_Sprite);
      } // Fl_Choice* o
      { Fl_Choice* o = new Fl_Choice(422, 578, 144, 24, "Shader");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_Shader);
      } // Fl_Choice* o
      o->end();
    } // Fl_Group* o
    window->end();
  } // Fl_Double_Window* window
}
