// generated by Fast Light User Interface Designer (fluid) version 1.0400

#ifndef MyCubeViewUI_h
#define MyCubeViewUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Box.H>
#include "SimpleGL3Window.h"
#include <iostream>
#include <FL/Fl_Button.H>
#include <FL/Fl_Choice.H>
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Tree.H>
#include <FL/Fl_Slider.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_File_Chooser.H>

class MyCubeViewUI {
public:
  void show(int argc, char **argv);
  MyCubeViewUI();
  Fl_Double_Window *window;
  SimpleGL3Window *cube;
private:
  inline void cb_Take_i(Fl_Button*, void*);
  static void cb_Take(Fl_Button*, void*);
  static Fl_Menu_Item menu_Number[];
  inline void cb_8_i(Fl_Menu_*, void*);
  static void cb_8(Fl_Menu_*, void*);
  inline void cb_16_i(Fl_Menu_*, void*);
  static void cb_16(Fl_Menu_*, void*);
  inline void cb_32_i(Fl_Menu_*, void*);
  static void cb_32(Fl_Menu_*, void*);
  inline void cb_64_i(Fl_Menu_*, void*);
  static void cb_64(Fl_Menu_*, void*);
  inline void cb_128_i(Fl_Menu_*, void*);
  static void cb_128(Fl_Menu_*, void*);
public:
  Fl_Value_Slider *rotationSliderY;
private:
  inline void cb_rotationSliderY_i(Fl_Value_Slider*, void*);
  static void cb_rotationSliderY(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *rotationSliderZ;
private:
  inline void cb_rotationSliderZ_i(Fl_Value_Slider*, void*);
  static void cb_rotationSliderZ(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *rotationSliderX;
private:
  inline void cb_rotationSliderX_i(Fl_Value_Slider*, void*);
  static void cb_rotationSliderX(Fl_Value_Slider*, void*);
public:
  Fl_Tree *meshTree;
  Fl_Slider *cubeScaleSlider;
private:
  inline void cb_cubeScaleSlider_i(Fl_Slider*, void*);
  static void cb_cubeScaleSlider(Fl_Slider*, void*);
  inline void cb_scale_i(Fl_Value_Slider*, void*);
  static void cb_scale(Fl_Value_Slider*, void*);
  inline void cb_offset_i(Fl_Value_Slider*, void*);
  static void cb_offset(Fl_Value_Slider*, void*);
  inline void cb_camera_i(Fl_Value_Slider*, void*);
  static void cb_camera(Fl_Value_Slider*, void*);
  inline void cb_ortho_i(Fl_Value_Slider*, void*);
  static void cb_ortho(Fl_Value_Slider*, void*);
  static Fl_Menu_Item menu_Sprite[];
  static Fl_Menu_Item menu_Shader[];
  inline void cb_Gouraud_i(Fl_Menu_*, void*);
  static void cb_Gouraud(Fl_Menu_*, void*);
  inline void cb_Unlit_i(Fl_Menu_*, void*);
  static void cb_Unlit(Fl_Menu_*, void*);
public:
  Fl_Menu_Bar *menu;
  static Fl_Menu_Item menu_menu[];
  static Fl_Menu_Item *file;
private:
  inline void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
};
#endif
