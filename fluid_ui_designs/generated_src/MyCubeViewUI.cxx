// generated by Fast Light User Interface Designer (fluid) version 1.0400

#include "MyCubeViewUI.h"

void MyCubeViewUI::cb_Take_i(Fl_Button*, void*) {
  cube->WriteToImage();
}
void MyCubeViewUI::cb_Take(Fl_Button* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_Take_i(o,v);
}

void MyCubeViewUI::cb_8_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 8;
}
void MyCubeViewUI::cb_8(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_8_i(o,v);
}

void MyCubeViewUI::cb_16_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 16;
}
void MyCubeViewUI::cb_16(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_16_i(o,v);
}

void MyCubeViewUI::cb_32_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 32;
}
void MyCubeViewUI::cb_32(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_32_i(o,v);
}

void MyCubeViewUI::cb_64_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 64;
}
void MyCubeViewUI::cb_64(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_64_i(o,v);
}

void MyCubeViewUI::cb_128_i(Fl_Menu_*, void*) {
  cube->directionsToCapture = 128;
}
void MyCubeViewUI::cb_128(Fl_Menu_* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_128_i(o,v);
}

Fl_Menu_Item MyCubeViewUI::menu_number[] = {
 {"8", 0,  (Fl_Callback*)MyCubeViewUI::cb_8, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"16", 0,  (Fl_Callback*)MyCubeViewUI::cb_16, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"32", 0,  (Fl_Callback*)MyCubeViewUI::cb_32, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"64", 0,  (Fl_Callback*)MyCubeViewUI::cb_64, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"128", 0,  (Fl_Callback*)MyCubeViewUI::cb_128, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MyCubeViewUI::cb_rotationSlider_i(Fl_Value_Slider* o, void*) {
  cube->rotationAngle = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_rotationSlider(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_rotationSlider_i(o,v);
}

void MyCubeViewUI::cb_verticalRotationSlider_i(Fl_Value_Slider* o, void*) {
  cube->verticalRotationAngle = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_verticalRotationSlider(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_verticalRotationSlider_i(o,v);
}

void MyCubeViewUI::cb_cubeScaleSlider_i(Fl_Slider* o, void*) {
  cube->cubeScale = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_cubeScaleSlider(Fl_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_cubeScaleSlider_i(o,v);
}

void MyCubeViewUI::cb_scale_i(Fl_Value_Slider* o, void*) {
  cube->zScale = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_scale(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_scale_i(o,v);
}

void MyCubeViewUI::cb_offset_i(Fl_Value_Slider* o, void*) {
  cube->zOffset = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_offset(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_offset_i(o,v);
}

void MyCubeViewUI::cb_camera_i(Fl_Value_Slider* o, void*) {
  cube->cameraZoom = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_camera(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_camera_i(o,v);
}

void MyCubeViewUI::cb_ortho_i(Fl_Value_Slider* o, void*) {
  cube->orthoSize = ((Fl_Slider*)o)->value();
}
void MyCubeViewUI::cb_ortho(Fl_Value_Slider* o, void* v) {
  ((MyCubeViewUI*)(o->parent()->parent()->user_data()))->cb_ortho_i(o,v);
}

void MyCubeViewUI::show(int argc, char **argv) {
  window->show(argc, argv);
}

/**
 test
*/
MyCubeViewUI::MyCubeViewUI() {
  { window = new Fl_Double_Window(840, 556);
    window->user_data((void*)(this));
    { Fl_Group* o = new Fl_Group(0, 0, 840, 162);
      { Fl_Box* o = new Fl_Box(0, 0, 840, 96, "Dan\'s Planometric Sprite Generator");
        o->labelfont(7);
        o->labelsize(30);
        o->align(Fl_Align(FL_ALIGN_WRAP));
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(15, 90, 381, 452);
      o->box(FL_UP_FRAME);
      { cube = new SimpleGL3Window(75, 118, 256, 256, "opengl context");
        cube->box(FL_NO_BOX);
        cube->color(FL_BACKGROUND_COLOR);
        cube->selection_color(FL_BACKGROUND_COLOR);
        cube->labeltype(FL_NORMAL_LABEL);
        cube->labelfont(0);
        cube->labelsize(14);
        cube->labelcolor(FL_FOREGROUND_COLOR);
        cube->align(Fl_Align(FL_ALIGN_CENTER));
        cube->when(FL_WHEN_RELEASE);
        cube->uiStuff = this;
      } // SimpleGL3Window* cube
      { Fl_Button* o = new Fl_Button(123, 503, 159, 20, "Take screenshot");
        o->callback((Fl_Callback*)cb_Take);
      } // Fl_Button* o
      { Fl_Choice* o = new Fl_Choice(224, 473, 92, 22, "number of directions");
        o->down_box(FL_BORDER_BOX);
        o->menu(menu_number);
      } // Fl_Choice* o
      { rotationSlider = new Fl_Value_Slider(92, 424, 224, 24, "rotation y axis");
        rotationSlider->type(5);
        rotationSlider->maximum(360);
        rotationSlider->step(1);
        rotationSlider->textsize(14);
        rotationSlider->callback((Fl_Callback*)cb_rotationSlider);
      } // Fl_Value_Slider* rotationSlider
      { verticalRotationSlider = new Fl_Value_Slider(92, 382, 224, 24, "rotation x axis");
        verticalRotationSlider->type(5);
        verticalRotationSlider->maximum(360);
        verticalRotationSlider->step(1);
        verticalRotationSlider->textsize(14);
        verticalRotationSlider->callback((Fl_Callback*)cb_verticalRotationSlider);
      } // Fl_Value_Slider* verticalRotationSlider
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(400, 90, 422, 451);
      { cubeScaleSlider = new Fl_Slider(455, 278, 300, 24, "cube scale");
        cubeScaleSlider->type(5);
        cubeScaleSlider->minimum(-100);
        cubeScaleSlider->maximum(100);
        cubeScaleSlider->step(0.01);
        cubeScaleSlider->value(1);
        cubeScaleSlider->callback((Fl_Callback*)cb_cubeScaleSlider);
      } // Fl_Slider* cubeScaleSlider
      { Fl_Value_Slider* o = new Fl_Value_Slider(455, 148, 300, 24, "scale");
        o->type(5);
        o->textsize(14);
        o->callback((Fl_Callback*)cb_scale);
      } // Fl_Value_Slider* o
      { Fl_Value_Slider* o = new Fl_Value_Slider(455, 235, 300, 24, "offset");
        o->type(5);
        o->minimum(-50);
        o->maximum(50);
        o->textsize(14);
        o->callback((Fl_Callback*)cb_offset);
      } // Fl_Value_Slider* o
      { Fl_Value_Slider* o = new Fl_Value_Slider(455, 109, 300, 24, "camera zoom");
        o->type(1);
        o->minimum(-25);
        o->maximum(25);
        o->value(-5);
        o->textsize(14);
        o->callback((Fl_Callback*)cb_camera);
      } // Fl_Value_Slider* o
      { Fl_Value_Slider* o = new Fl_Value_Slider(455, 195, 300, 24, "ortho size");
        o->type(5);
        o->minimum(-100);
        o->maximum(100);
        o->value(5);
        o->textsize(14);
        o->callback((Fl_Callback*)cb_ortho);
      } // Fl_Value_Slider* o
      { meshTree = new Fl_Tree(410, 318, 148, 223);
      } // Fl_Tree* meshTree
      o->end();
    } // Fl_Group* o
    window->end();
  } // Fl_Double_Window* window
}
